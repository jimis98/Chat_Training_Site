<!DOCTYPE html>
<html>
  <head>
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <link rel="stylesheet" href="https://code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
  <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>
    <base target="_top">
    <style>
      body {
        font-family: Arial, sans-serif;
        background-color: #f5f5f5;
        margin: 0;
        padding: 20px;
        margin: 0;
        display: flex;  
        justify-content: center;
        align-items: flex-start; /* Align items at the top */
      }
      #Interface {
        display: none;
        background-color: #fff;
        padding: 20px;
        border-radius: 5px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
        font-weight: bold; /* Add bold font */
        text-align: center; /* Center text inside the form */
      }
      h2 {
        text-align: center; /* Center text inside the form */
        font-weight: bold;
        color: #333;
      }
      label {
        font-weight: bold;
      }
      button[type="submit"], button {
      font-weight: bold; /* Make the text bold */
      padding: 10px;
      margin-top: 10px;
      border: block;
      border-radius: 5px;
      background-color: #fff; /* Red color */
      color: #000000;
      cursor: pointer;
      }
      #choice {
      font-weight: bold; /* Make the text bold */
      padding: 10px;
      margin-top: 10px;
      border: block;
      border-radius: 5px;
      background-color: #fff; /* Background color */
      color: #000000; /* Text color */
      cursor: pointer;
      }
      #choice option {
      color: #000000; /* Text color */
      }
      .container {
            display: flex;
            justify-content: space-between;
            padding: 16px;
      }
      #UloadingIndicator {
      display: flex;
      justify-content: center; /* Center horizontally */
      align-items: center; /* Center vertically */
      position: fixed;
      top: 0;
      left: 0;
      width: 100%; /* Full width */
      background-color: #fff;
      padding: 20px;
      border: none; /* Remove border */
      font-weight: bold; /* Add bold font */
      text-align: center; /* Center text inside the form */
      }
      select {
      width: 100%;
      padding: 12px 20px;
      margin: 8px 0;
      display: inline-block;
      border: 1px solid #ccc;
      box-sizing: border-box;
      font-weight: bold;
  }
  input[type=email]{
      width: 100%;
      padding: 12px 20px;
      margin: 8px 0;
      display: inline-block;
      border: 1px solid #ccc;
      box-sizing: border-box;
      font-weight: bold;
  }

    /* Set a style for all buttons */
  button {
      background-color: #f44336;
      color: white;
      padding: 14px 20px;
      margin: 8px 0;
      border: none;
      cursor: pointer;
      width: 100%;
  }

  button:hover {
      opacity: 0.8;
  }

    /* Extra styles for the cancel button */
    .cancelbtn {
      width: auto;
      padding: 10px 18px;
      background-color: #f44336;
    }

    /* Center the image and position the close button */
    .imgcontainer {
      text-align: center;
      margin: 24px 0 12px 0;
      position: relative;
    }

    img.avatar {
      width: 20%;
      border-radius: 50%;
    }

    /* The Modal (background) */
    .modal {
      display: none; /* Hidden by default */
      position: fixed; /* Stay in place */
      z-index: 1; /* Sit on top */
      left: 0;
      top: 0;
      width: 100%; /* Full width */
      height: 100%; /* Full height */
      overflow: auto; /* Enable scroll if needed */
      background-color: rgb(0,0,0); /* Fallback color */
      background-color: rgba(0,0,0,0.4); /* Black w/ opacity */
      padding-top: 60px;
    }

    /* Modal Content/Box */
    .modal-content {
      background-color: #fefefe;
      margin: 5% auto 15% auto; /* 5% from the top, 15% from the bottom and centered */
      border: 1px solid #888;
      width: 80%; /* Could be more or less, depending on screen size */
    }

    /* The Close Button (x) */
    .close {
      position: absolute;
      right: 25px;
      top: 0;
      color: #000;
      font-size: 35px;
      font-weight: bold;
    }

    .close:hover,
    .close:focus {
      color: red;
      cursor: pointer;
    }

    /* Add Zoom Animation */
    .animate {
      -webkit-animation: animatezoom 0.6s;
      animation: animatezoom 0.6s
    }

    @-webkit-keyframes animatezoom {
      from {-webkit-transform: scale(0)} 
      to {-webkit-transform: scale(1)}
    }
      
    @keyframes animatezoom {
      from {transform: scale(0)} 
      to {transform: scale(1)}
    }

    /* Change styles for span and cancel button on extra small screens */
    @media screen and (max-width: 300px) {
      span.psw {
        display: block;
        float: none;
      }
      .cancelbtn {
        width: 100%;
      }
    }
    .custom-alert {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: #ffffff;
      border: 2px solid #ff0000;
      border-radius: 5px;
      padding: 20px;
      box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
      z-index: 9999;
    }

    .custom-alert-content {
      font-size: 18px;
      color: #000;
      text-align: center;
      margin-bottom: 15px;
    }

    button {
      background-color: #ff0000;
      color: #ffffff;
      border: none;
      border-radius: 5px;
      padding: 10px 20px;
      cursor: pointer;
    }

    button:hover {
      background-color: #cc0000;
    }
    .bg-image {
      /* The image used */
      background-image: url("Your jpg file");
      
      /* Add the blur effect */
      filter: blur(8px);
      -webkit-filter: blur(8px);
      
      width: 70vw;
      height: 90vh;
      
      /* Center and scale the image nicely */
      background-position: center;
      background-repeat: no-repeat;
      background-size: cover;
    }
    .bg-text {
      background-color: rgb(0,0,0); /* Fallback color */
      background-color: rgba(0,0,0, 0.4); /* Black w/opacity/see-through */
      color: white;
      font-weight: bold;
      border: 3px solid #f1f1f1;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 2;
      width: 69%;
      padding: 20px;
      text-align: center;
    }
    .bg-text1 {
      background-color: rgba(255, 255, 255, 0.7); /* Semi-transparent white */
      color: white;
      font-weight: bold;
      border: 3px solid #f1f1f1;
      position: absolute;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      z-index: 2;
      width: 69%;
      padding: 20px;
      text-align: center;
    }

    .chat-container {
        width: 800px;
        height: 400px;
        border: 1px solid #ccc;
        border-radius: 10px;
        display: flex;
        flex-direction: column;
        justify-content: space-between;
        padding: 10px;
        font-family: Arial, sans-serif;
        background-color: #fff;
    }

    /* Styling the chat history box */
    .chat-history {
        flex: 1;
        overflow-y: auto;
        padding: 10px;
        margin-bottom: 10px;
        border-radius: 5px;
        background-color: #efe5e5;
        box-shadow: 0 0 5px rgba(0, 0, 0, 0.1);
    }

    /* Wrapping each message and name together */
    .message-wrapper {
        margin-bottom: 10px; /* Adds space between message blocks */
        display: flex;
        flex-direction: column; /* Stack message and name vertically */
    }

    /* Styling the individual chat messages */
    .message {
        padding: 8px 12px;
        margin: 8px 0;
        border-radius: 15px;
        max-width: 75%; /* Limit message width to 75% */
        word-wrap: break-word; /* Allow words to break */
        clear: both; /* Ensure each message starts on a new line */
        overflow: hidden; /* Hide overflow content */
      text-overflow: ellipsis; /* Add ellipsis for overflow */
    }

    /* User message aligned to the right */
    .user-message {
        background-color: #89CFF0;
        color: black;
        margin-left: auto; /* Pushes message to the right */
        text-align: left; /* Text inside the message remains left-aligned */
        display: block;
        max-width: 75%;
        word-wrap: break-word;
        white-space: pre-wrap;
        clear: both;
    }

    .case-message {
        background-color: #f7f5bc;
        color: black;
        margin-left: auto;
        text-align: left; /* Διατηρούμε το κείμενο αριστερά */
        display: block; /* Εξασφαλίζουμε ότι το μήνυμα καλύπτει ολόκληρη τη γραμμή */
        float: left; /* Τοποθετούμε το μήνυμα στα δεξιά */
        max-width: 75%;
        word-wrap: break-word;
        white-space: pre-wrap;
        clear: both;
    }
            

    /* Second user's message aligned to the left */
    .second-user-message {
        background-color: #FFFFFF;
        color: black;
        margin-right: auto; /* Pushes message to the left */
        text-align: left;
        display: block;
        max-width: 75%;
        word-wrap: break-word;
        white-space: pre-wrap;
    }

    /* Styling the name below each message */
    .name {
        font-size: 12px;
        color: #777; /* Grey text for names */
        margin-top: 5px; /* Adds space between message and name */
    }
    .time {
        font-size: 12px;
        color: #777; /* Grey text for names */
        margin-top: 5px; /* Adds space between message and name */
    }

    /* User's name aligned to the right */
    .user-name {
        text-align: right; /* Aligns name to the right below user's message */
        margin-right: auto;
    }
    .user-time {
        text-align: right; /* Aligns name to the right below user's message */
        margin-right: auto;
    }

    /* Second user's name aligned to the left */
    .second-user-name {
        text-align: left; /* Aligns name to the left below second user's message */
        margin-right: auto;
    }
    .second-user-time {
        text-align: left; /* Aligns name to the left below second user's message */
        margin-right: auto;
    }


        /* Input section at the bottom */
        .chat-input {
            display: flex;
            border-top: 1px solid #ddd;
            padding-top: 10px;
        }

        /* Text input styling */
        #question {
            flex: 1;
            padding: 10px;
            border: 1px solid #ccc;
            border-radius: 5px;
            margin-right: 10px;
            outline: none;
            font-size: 14px;
        }

        /* Send button styling */
        #buttonS {
            background-color: #efe5e5; /* Red background */
            color: black;
            padding: 8px 16px; /* Smaller padding */
            border: none;
            border-radius: 5px;
            cursor: pointer;
            font-size: 12px; /* Smaller font size */
            flex-shrink: 0; /* Prevents the button from shrinking */
            width: auto; /* Keeps it based on content size */
        }

        #buttonS:hover {
            background-color: #efe5e5; /* Darker red on hover */
        }

        #textbox-container {
          margin-top: 20px;
          display: none; /* Initially hidden */
        }

        #extra-textbox {
          width: 100%;
          padding: 10px;
          margin-bottom: 10px;
          font-size: 14px;
          border: 1px solid #ccc;
          border-radius: 5px;
        }

        #textbox-container button {
          padding: 10px 20px;
          background-color: #efe5e5;
          color: black;
          border: none;
          border-radius: 5px;
          cursor: pointer;
        }

        #textbox-container button:hover {
          background-color: #efe5e5;
        }
    </style>

  </head>
  <body>
    <div id="customAlert" class="custom-alert">
      <div class="custom-alert-content">Invalid email or business title. Please try again.</div>
      <button onclick="hideCustomAlert()">OK</button>
    </div>
    <div class="bg-image" Id="bgImg"></div>
    <div class="bg-text" id="bgText">
    <div style="display: flex; justify-content: center;">
      <button id="lg" onclick="showLoginSite()" style="width:auto; font-size: 20px; padding: 15px 30px;">Chat training log in</button>
    </div>
    </div>
    <div id="id01" class="modal">
      <form id="loginForm" onsubmit="event.preventDefault(); validateLogin();" class="modal-content animate" action="/action_page.php" method="post">
      <div class="imgcontainer">
        <img id="img.avatar"src="https://i0.wp.com/soccer.commercial-league.gr/wp-content/uploads/sites/5/2022/10/Efood_Logo512t.png?fit=512%2C512&ssl=1" alt="Avatar" class="avatar">
      </div>
      <div id="UloadingIndicator" style="display: none;">
        Loading...
      </div>
      <div class="container">
              <input type="email" id="userEmail" name="email" placeholder="Enter your email">
      </div>
      <div class="container">
              <select id="choice" name="choice">
                  <option value="" disabled selected>Business Title</option>
                  <option value="Trainer">Trainer</option>
                  <option value="Agent">Agent</option>
              </select>
      </div>
        <div class="container">
              <button type="submit">Login</button>
      </div>
      <div class="container" style="background-color:#f1f1f1">
      <button type="button" onclick="hideLoginSite()" class="cancelbtn">Cancel</button>
    </div>
  </form>
  </div>

  <div class="panel" id="Interface" style="display: none;">
    <div class="imgcontainer">
      <h2>Welcome to, <img id="img.avatar"src="https://contact-centres.com/wp-content/uploads/2016/09/live-chat-chalk.image_.sept_.2016.jpg" alt="Avatar" class="avatar"> training</h2>
    </div>
    <div id="textbox-container" style="display: none;">
      <textarea id="extra-textbox" placeholder="Enter Chat Case..."></textarea>
      <button onclick="submitText()">Submit Case</button>
    </div>

    <!-- New description container outside of chat-container -->
    <div id="description-container" class="description-text">
        <!-- Description messages will be appended here -->
    </div>

    <div class="chat-container">
        <div id="chat-history" class="chat-history">
            <!-- Τα μηνύματα θα προστεθούν εδώ -->
        </div>
        <div class="chat-input">
            <input type="text" id="question" placeholder="Type here" onkeydown="if (event.key === 'Enter') sendQuestion()">
            <button id="buttonS" onclick="sendQuestion()">➤Send</button>
        </div>
    </div>
  </div>
  <script> 
    var currentUserEmail;
    var pendingMessages = [];
    var currentUserRole; // Θα αποθηκεύσει τον ρόλο του χρήστη

      window.onload = function() {
        google.script.run.withSuccessHandler(function(email) {
            console.log("Retrieved email:", email); // Correct logging
            currentUserEmail = email;

            // Check if email is defined before calling updateChat & updateCase
            if (currentUserEmail) {
                updateChat(); // Update chat after email is successfully retrieved
                updateCase();
            } else {
                console.error("Email is undefined.");
            }
            // Ρυθμίζουμε το textbox-container ανάλογα με τον ρόλο
            if (currentUserRole === "Trainer") {
              document.getElementById('textbox-container').style.display = 'block';
            } else {
              document.getElementById('textbox-container').style.display = 'none';
            }
        }).getCurrentUserEmail();
      };

      

      function sendQuestion() {
          if (!currentUserEmail) {
              alert("Email not loaded yet. Please wait.");
              return;
          }

          var question = document.getElementById("question").value;

          if (question.trim() !== "") {
              // Προσθήκη του μηνύματος στην οθόνη αμέσως
              addUserMessageToChat(question);

              // Προσθήκη του μηνύματος στα pending messages μέχρι να το λάβει ο server
              pendingMessages.push(question);

              // Καθαρισμός του input
              document.getElementById("question").value = "";

              // Αποστολή του μηνύματος στο server
              google.script.run.saveMessage(currentUserEmail, question);
          }
      }

      function addUserMessageToChat(message) {
          var chatHistory = document.getElementById("chat-history");
          var userMessage = document.createElement("div");
          var nameMessage = document.createElement("div");
          userMessage.className = "message user-message";
          nameMessage.className = "name user-name";
          var displayName = currentUserEmail.split('.')[0];
          userMessage.innerHTML = `${message}`;
          nameMessage.innerHTML = 'Sending..';
          chatHistory.appendChild(userMessage);
          chatHistory.appendChild(nameMessage);

          // Scroll to the bottom
          chatHistory.scrollTop = chatHistory.scrollHeight;
      }

      function updateChat() {
          google.script.run.withSuccessHandler(displayMessages).getMessages();
      }
      function updateCase() {
        google.script.run.withSuccessHandler(function(messages) {
          displayCase(messages);
          if (currentUserRole === "Agent") {
            document.getElementById('textbox-container').style.display = 'none'; // Εμφάνιση για Trainers
          }
        }).getMessages();
      }

      function displayCase(messages){
        var descriptionContainer = document.getElementById("description-container");
        var textboxContainer = document.getElementById("textbox-container");
        descriptionContainer.innerHTML = "";

        // Track if there's any description message
        var hasDescription = false;
        messages.forEach(function(message) {
          if(message.username === 'Description'){
                hasDescription = true; // Flag that there is a description message
                var messageDiv = document.createElement("div");
                var displayName = message.username;
                var time = message.timestamp;
                messageDiv.className = "message case-message"; // Χρήστης
                messageDiv.innerHTML = `<b>${displayName} ●</b> ${time}:<div>${message.message}</div>`;
                descriptionContainer.appendChild(messageDiv);
          }
        });
        // Toggle the visibility of textbox-container based on the presence of description
        if (hasDescription) {
            textboxContainer.style.display = "none";
        } else {
            textboxContainer.style.display = "block";
        }
      }



      function displayMessages(messages) {
        var chatHistory = document.getElementById("chat-history");

        // Διατήρηση υπάρχοντος ιστορικού
        var existingMessages = Array.from(chatHistory.children);

        // Συνδυασμός server messages και pendingMessages
        var allMessages = [...messages];

        pendingMessages.forEach(function(pendingMessage) {
            var exists = messages.some(function(message) {
                return message.username === currentUserEmail && message.message === pendingMessage;
            });

            if (!exists) {
                allMessages.push({
                    username: currentUserEmail,
                    message: pendingMessage,
                    timestamp: "Sending..." // Εμφανίζει προσωρινό timestamp
                });
            }
        });

        chatHistory.innerHTML = ""; // Καθαρισμός του ιστορικού για να προστεθούν όλα τα μηνύματα


        allMessages.forEach(function(message) {
            
            // Επιλέγουμε την κλάση με βάση το username του χρήστη
            if(message.username != 'Description'){
              var messageWrapper = document.createElement("div"); // Wrapper for both message and name
              var messageDiv = document.createElement("div"); // Div for the message content
              var nameDiv = document.createElement("div");    // Div for the display name

              // Assuming usernames are in the format firstname.lastname@example.com
              var nameParts = message.username.split('@')[0].split('.'); // Splitting by '@' first to remove domain
              var firstName = capitalize(nameParts[0]);
              var lastName = nameParts[1] ? capitalize(nameParts[1]) : ""; // Handle cases where there's no last name
              var displayName = firstName + (lastName ? " " + lastName : ""); // Combine first and last name
              var time = message.timestamp;

              if (message.username === currentUserEmail) {
                messageDiv.className = "message user-message"; // Χρήστης
                nameDiv.className = "name user-name"; // Style for the user's name
              } else {
                messageDiv.className = "message second-user-message"; // Δεύτερος χρήστης
                nameDiv.className = "name second-user-name"; // Style for the second user's name
              }
              // Set the message content
              messageDiv.innerHTML = message.message;

              // Set the display name content (name appears below message)
              nameDiv.innerHTML = `<b>${displayName} ●</b> ${time}`;

              // Append message and name to the wrapper (name goes below message)
              messageWrapper.appendChild(messageDiv);
              messageWrapper.appendChild(nameDiv);

              // Append the wrapper to the chat history
              chatHistory.appendChild(messageWrapper);
            } 
        });

        // Καθαρισμός των pendingMessages που έχουν αποσταλεί και εμφανιστεί από το server
        pendingMessages = pendingMessages.filter(function(pendingMessage) {
            return !messages.some(function(message) {
                return message.username === currentUserEmail && message.message === pendingMessage;
            });
        });

        // Scroll to the bottom
        //chatHistory.scrollTop = chatHistory.scrollHeight;
    }

    // Helper function to capitalize the first letter
    function capitalize(str) {
        return str.charAt(0).toUpperCase() + str.slice(1);
    }


    setInterval(updateChat, 5000); // Ανανεώνει το chat κάθε 5 δευτερόλεπτα
    setInterval(updateCase, 5000); // Ανανεώνει το chat κάθε 5 δευτερόλεπτα


    function hideLoginSite() {
      document.getElementById('id01').style.display = 'none'; // Hide the login form
      document.getElementById('bgText').style.display = 'block'; // Show the background text
    }
    function showLoginSite() {
      document.getElementById('id01').style.display = 'block'; // Show the login form
      document.getElementById('bgText').style.display = 'none'; // Hide the background text
    }
    var modal = document.getElementById('id01');
    var button = document.getElementById('bgText');
    // When the user clicks anywhere outside of the modal, close it
    window.onclick = function(event) {
        if (event.target == modal) {
            modal.style.display = "none";
            button.style.display = "block";
        }
    }
    
    function validateLogin() {
      var email = document.getElementById('userEmail').value;
      var choice = document.getElementById('choice').value;
      document.getElementById('UloadingIndicator').style.display = 'block';

      google.script.run.withSuccessHandler(function(success) {
        if (success && (choice === "Trainer" || choice === "Agent")) {
          currentUserRole = choice;  // Αποθήκευση του ρόλου
          if (currentUserRole === "Trainer") {
            document.getElementById('textbox-container').style.display = 'block'; // Εμφάνιση του textbox για Trainers
          } else {
            document.getElementById('textbox-container').style.display = 'none'; // Απόκρυψη του textbox για Agents
          }
          document.getElementById('loginForm').style.display = 'none';
          document.getElementById('Interface').style.display = 'block';
          currentUserRole = choice;  // Store the user role
          modal.style.display = "none";
          document.getElementById('lg').style.display = 'none';
          document.getElementById('bgImg').style.display = 'none';
          document.getElementById('UloadingIndicator').style.display = 'none';
        } else {
          showCustomAlert();
          document.getElementById('userEmail').value = '';
          document.getElementById('choice').value = '';
          document.getElementById('UloadingIndicator').style.display = 'none';
        }
      }).login(email, choice);
    }


    function submitText() {
      var additionalText = document.getElementById("extra-textbox").value;
      if (additionalText.trim() !== "") {
        google.script.run.saveCase(additionalText); // Send data to Google Sheets
        document.getElementById("extra-textbox").value = ""; // Clear the textbox
      }
    }

    function showCustomAlert() {
      document.getElementById('customAlert').style.display = 'block';
    }
    function hideCustomAlert() {
      document.getElementById('customAlert').style.display = 'none';
    }

  </script>  
  </body>
</html>
